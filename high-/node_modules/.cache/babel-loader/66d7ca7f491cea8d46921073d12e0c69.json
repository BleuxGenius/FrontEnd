{"ast":null,"code":"import axiosWithAuth from \"../utils/authWithAxios\";\nimport { createBrowserHistory } from \"history\";\nexport const history = createBrowserHistory();\nexport const USER_SIGNING = \"USER_SIGNING\";\nexport const USER_SIGNING_SUCCESS = \"USER_SIGNING_SUCCESS\";\nexport const USER_SIGNING_FAILURE = \"USER_SIGNING_FAILURE\";\nexport const signUp = signUpData => dispatch => {\n  dispatch({\n    type: USER_SIGNING\n  });\n  axiosWithAuth().post(`api/user/register`, signUpData).then(response => dispatch({\n    type: USER_SIGNING_SUCCESS,\n    payload: response.data.user\n  }, localStorage.setItem(\"token\", response.data.token) // history.push('/login')\n  )).catch(err => dispatch({\n    type: USER_SIGNING_FAILURE,\n    payload: err.response\n  }));\n};\nexport const USER_LOGING_IN = \"USER_LOGING_IN\";\nexport const USER_LOGING_IN_SUCCESS = \"USER_LOGING_IN_SUCCESS\";\nexport const USER_LOGING_IN_FAILURE = \"USER_LOGING_IN_FAILURE\";\nexport const login = loginData => dispatch => {\n  dispatch({\n    type: USER_LOGING_IN\n  });\n  axiosWithAuth().post(`api/user/login`, loginData).then(response => dispatch({\n    type: USER_LOGING_IN_SUCCESS,\n    payload: response.data.user\n  }, localStorage.setItem(\"token\", response.data.token), history.push(\"/\"))).catch(err => {\n    dispatch({\n      type: USER_LOGING_IN_FAILURE,\n      payload: err.response\n    });\n  });\n};\nexport const POST_STRAINS_START = \"POST_STRAINS_START\";\nexport const POST_STRAINS_SUCCESS = \"POST_STRAINS_SUCCESS\";\nexport const POST_STRAINS_FAILURE = \"POST_STRAINS_FAILURE\";\nexport const postStrainData = newStrain => dispatch => {\n  dispatch({\n    type: POST_STRAINS_START\n  });\n  axiosWithAuth().post(`/api/strain`, newStrain).then(res => {\n    dispatch({\n      type: POST_STRAINS_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: POST_STRAINS_FAILURE,\n      payload: `${err.response.status}: ${err.response.statusText}`\n    });\n  });\n}; //DELETE\n\nexport const DELETE_STRAINS_START = \"DELETE_STRAINS_START\";\nexport const DELETE_STRAINS_SUCCESS = \"DELETE_STRAINS_SUCCESS\";\nexport const DELETE_STRAINS_FAILURE = \"DELETE_STRAINS_FAILURE\";\nexport const deleteStrain = id => dispatch => {\n  dispatch({\n    type: DELETE_STRAINS_START\n  });\n  axiosWithAuth().delete(`/api/strain/${id}`).then(res => {\n    dispatch({\n      type: DELETE_STRAINS_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: DELETE_STRAINS_FAILURE,\n      payload: `${err.response.status}: ${err.response.statusText}`\n    });\n  });\n};\nexport const START_FETCHING_DATA = \"START_FETCHING_DATA\";\nexport const FETCH_SUCCESS_DATA = \"FETCH_SUCCESS_DATA\";\nexport const FETCH_FAILURE_DATA = \"FETCH_FAILURE_DATA\";\nexport const fetchingUserData = () => dispatch => {\n  dispatch({\n    type: START_FETCHING_DATA\n  });\n  axiosWithAuth().get(`api/users/profile`).then(response => dispatch({\n    type: FETCH_SUCCESS_DATA,\n    payload: response.data\n  })).catch(err => dispatch({\n    type: FETCH_FAILURE_DATA,\n    payload: err.response\n  }));\n};","map":{"version":3,"sources":["/Users/anthonylopez/LambdaSchool/web25/newFront/FrontEnd/high-/src/actions/index.js"],"names":["axiosWithAuth","createBrowserHistory","history","USER_SIGNING","USER_SIGNING_SUCCESS","USER_SIGNING_FAILURE","signUp","signUpData","dispatch","type","post","then","response","payload","data","user","localStorage","setItem","token","catch","err","USER_LOGING_IN","USER_LOGING_IN_SUCCESS","USER_LOGING_IN_FAILURE","login","loginData","push","POST_STRAINS_START","POST_STRAINS_SUCCESS","POST_STRAINS_FAILURE","postStrainData","newStrain","res","status","statusText","DELETE_STRAINS_START","DELETE_STRAINS_SUCCESS","DELETE_STRAINS_FAILURE","deleteStrain","id","delete","START_FETCHING_DATA","FETCH_SUCCESS_DATA","FETCH_FAILURE_DATA","fetchingUserData","get"],"mappings":"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","sourcesContent":["import axiosWithAuth from \"../utils/authWithAxios\";\nimport { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();\n\nexport const USER_SIGNING = \"USER_SIGNING\";\nexport const USER_SIGNING_SUCCESS = \"USER_SIGNING_SUCCESS\";\nexport const USER_SIGNING_FAILURE = \"USER_SIGNING_FAILURE\";\n\nexport const signUp = signUpData => dispatch => {\n  dispatch({ type: USER_SIGNING });\n\n  axiosWithAuth()\n    .post(`api/user/register`, signUpData)\n    .then(response =>\n      dispatch(\n        { type: USER_SIGNING_SUCCESS, payload: response.data.user },\n        localStorage.setItem(\"token\", response.data.token)\n        // history.push('/login')\n      )\n    )\n    .catch(err =>\n      dispatch({ type: USER_SIGNING_FAILURE, payload: err.response })\n    );\n};\n\nexport const USER_LOGING_IN = \"USER_LOGING_IN\";\nexport const USER_LOGING_IN_SUCCESS = \"USER_LOGING_IN_SUCCESS\";\nexport const USER_LOGING_IN_FAILURE = \"USER_LOGING_IN_FAILURE\";\n\nexport const login = loginData => dispatch => {\n  dispatch({ type: USER_LOGING_IN });\n\n  axiosWithAuth()\n    .post(`api/user/login`, loginData)\n    .then(response =>\n      dispatch(\n        { type: USER_LOGING_IN_SUCCESS, payload: response.data.user },\n        localStorage.setItem(\"token\", response.data.token),\n        history.push(\"/\")\n      )\n    )\n    .catch(err => {\n      dispatch({ type: USER_LOGING_IN_FAILURE, payload: err.response });\n    });\n};\n\nexport const POST_STRAINS_START = \"POST_STRAINS_START\";\nexport const POST_STRAINS_SUCCESS = \"POST_STRAINS_SUCCESS\";\nexport const POST_STRAINS_FAILURE = \"POST_STRAINS_FAILURE\";\n\nexport const postStrainData = newStrain => dispatch => {\n  dispatch({ type: POST_STRAINS_START });\n\n  axiosWithAuth()\n    .post(`/api/strain`, newStrain)\n\n    .then(res => {\n      dispatch({ type: POST_STRAINS_SUCCESS, payload: res.data });\n    })\n\n    .catch(err => {\n      dispatch({\n        type: POST_STRAINS_FAILURE,\n\n        payload: `${err.response.status}: ${err.response.statusText}`\n      });\n    });\n};\n\n//DELETE\n\nexport const DELETE_STRAINS_START = \"DELETE_STRAINS_START\";\n\nexport const DELETE_STRAINS_SUCCESS = \"DELETE_STRAINS_SUCCESS\";\n\nexport const DELETE_STRAINS_FAILURE = \"DELETE_STRAINS_FAILURE\";\n\nexport const deleteStrain = id => dispatch => {\n  dispatch({ type: DELETE_STRAINS_START });\n\n  axiosWithAuth()\n    .delete(`/api/strain/${id}`)\n\n    .then(res => {\n      dispatch({ type: DELETE_STRAINS_SUCCESS, payload: res.data });\n    })\n\n    .catch(err => {\n      dispatch({\n        type: DELETE_STRAINS_FAILURE,\n\n        payload: `${err.response.status}: ${err.response.statusText}`\n      });\n    });\n};\n\nexport const START_FETCHING_DATA = \"START_FETCHING_DATA\";\nexport const FETCH_SUCCESS_DATA = \"FETCH_SUCCESS_DATA\";\nexport const FETCH_FAILURE_DATA = \"FETCH_FAILURE_DATA\";\n\nexport const fetchingUserData = () => dispatch => {\n  dispatch({type: START_FETCHING_DATA})\n  axiosWithAuth()\n  .get(`api/users/profile`)\n  .then(response => dispatch({ type: FETCH_SUCCESS_DATA, payload: response.data }))\n  .catch(err => dispatch({type: FETCH_FAILURE_DATA, payload: err.response}))\n}\n"]},"metadata":{},"sourceType":"module"}